{"version":3,"sources":["Images/eu.jpg","components/Navbar/NavbarItem.js","components/Navbar/Navbar.js","components/SobreMim/SobreMim.js","components/Habilidades/Habilidade.js","components/Habilidades/Habilidades.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarItem","props","className","this","title","React","Component","Navbar","SobreMim","src","MinhaFoto","alt","Habilidades","nome","style","backgroundColor","flex","porcentagem","Habilidade","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,gC,oNCkB5BC,G,iBAdb,WAAYC,GAAO,qEACRA,I,sEAIL,OACI,yBAAKC,UAAY,eACb,4BAAKC,KAAKF,MAAMG,Y,GARPC,IAAMC,YCehBC,E,iLAZP,OACI,yBAAKL,UAAY,UACb,kBAAC,EAAD,CAAYE,MAAQ,cACpB,kBAAC,EAAD,CAAYA,MAAQ,gBACpB,kBAAC,EAAD,CAAYA,MAAQ,aACpB,kBAAC,EAAD,CAAYA,MAAQ,iB,GAPfC,IAAMC,W,iBCyBZE,G,uLAtBP,OACI,yBAAKN,UAAU,uBAEX,yBAAKA,UAAU,kBACX,yBACAA,UAAU,cACVO,IAAKC,IACLC,IAAI,6BAKR,yBAAKT,UAAU,mBACX,0J,GAfGG,IAAMC,YCoBdM,G,sLApBP,OACI,yBAAKV,UAAU,wBAEX,6BAAMC,KAAKF,MAAMY,MAGjB,yBAAKX,UAAU,sBAEX,yBACAA,UAAU,wBACVY,MAAO,CAACC,gBAAiB,UAAWC,KAAKb,KAAKF,MAAMgB,eAGpD,yBAAKH,MAAO,CAACE,KAAM,IAAMb,KAAKF,MAAMgB,qB,GAf9BZ,IAAMC,YCcjBM,E,iLAXP,OACI,yBAAKV,UAAU,yBACf,kBAACgB,EAAD,CAAYD,YAAa,EAAGJ,KAAK,UACjC,kBAACK,EAAD,CAAYD,YAAa,GAAIJ,KAAK,gB,GALpBR,IAAMC,WCejBa,MAbf,WACE,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAEhB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a708416a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eu.413064cf.jpg\";","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nclass NavbarItem extends React.Component{\r\n  constructor(props){\r\n      super (props)\r\n  }   \r\n\r\n    render(){\r\n        return(\r\n            <div className = \"navbar-item\">\r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavbarItem;","import React from \"react\";\r\nimport NavbarItem from \"./NavbarItem\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navbar extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className = \"navbar\">\r\n                <NavbarItem title = \"Sobre mim\"/>\r\n                <NavbarItem title = \"Habilidades\"/>\r\n                <NavbarItem title = \"Projetos\"/>\r\n                <NavbarItem title = \"Contato\"/>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport MinhaFoto from \"../../Images/eu.jpg\";\r\nimport \"./SobreMim.css\";\r\n\r\n\r\nclass SobreMim extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"sobre-mim-container\">\r\n                {/*Aqui vai ser a foto*/}\r\n                <div className=\"foto-container\">       \r\n                    <img \r\n                    className=\"foto-perfil\"\r\n                    src={MinhaFoto} \r\n                    alt=\"Foto de perfil de Carol\"\r\n                    ></img>\r\n                </div>\r\n\r\n                {/*Aqui vai ser o texto*/}\r\n                <div className=\"texto-container\">\r\n                    <p>\r\n                        Eu sou Carol, estou estudando Python e hoje estou \r\n                        participando de um workshop de react. o/ Lorem ipsum dolor sit amet\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n} \r\nexport default SobreMim;","import React from \"react\";\r\nimport \"./Habilidades.css\";\r\n\r\nclass Habilidades extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"habilidade-container\">\r\n                {/*Nome da habilidade*/}\r\n                <div>{this.props.nome}</div>\r\n                \r\n                {/* A barrinha em si */}\r\n                <div className=\"barrinha-container\"> \r\n                    {/*Parte preenchida*/ }\r\n                    <div\r\n                    className=\"preenchimentoBarrinha\"\r\n                    style={{backgroundColor: \"#ffffff\", flex:this.props.porcentagem}}\r\n                    />\r\n                    {/*Parte que falta*/ }\r\n                    <div style={{flex: 100 - this.props.porcentagem}}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n       \r\n}\r\nexport default Habilidades;","import React from \"react\";\r\nimport Habilidade from\"./Habilidade\";\r\nimport \"./Habilidades.css\";\r\n\r\nclass Habilidades extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"habilidades-container\">\r\n            <Habilidade porcentagem={5} nome=\"React\" />\r\n            <Habilidade porcentagem={30} nome=\"Python\" />\r\n                 \r\n                            \r\n            </div>\r\n        );\r\n    }\r\n       \r\n}\r\nexport default Habilidades;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport SobreMim from \"./components/SobreMim/SobreMim\";\nimport Habilidades from \"./components/Habilidades/Habilidades\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        <Navbar/>\n        <SobreMim/>\n        <Habilidades/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}